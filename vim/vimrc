source $VIMRUNTIME/vimrc_example.vim

set encoding=utf-8

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

" Checks if vim-plug is already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Start vim-plug
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
call plug#end()
" End vim-plug and initialize

" Check if the symbols exist
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

" Configuring components of airline
let g:airline_powerline_fonts=1
let g:airline_symbols.branch = ''
" let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = ''
let g:airline_theme='deus'

let g:airline_section_warning=''
let g:airline_section_y=''
let g:airline_skip_empty_sections=1

let g:airline#extensions#branch#enabled=1
" End configuration

syntax on
set autoindent
set noshowmode
set noswapfile

set number			" show line numbers

" Split panes below or right
set splitbelow
set splitright

set laststatus=1
set shiftwidth=4
set tabstop=4
set textwidth=80

" Remap keys for splitting panes
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" for assembly files, 2 spaces
autocmd Filetype nasm setlocal ts=2 sw=2 expandtab

if !has('gui_running')
	set t_Co=256
	set background=dark
endif

" SIMPL
au BufRead,BufNewFile *.simpl setfiletype simpl
